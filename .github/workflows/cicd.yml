name: CI/CD Docker Build and Push
 
on:
   push:
     branches:
       - main
 
env:
   DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
   DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
   IMAGE_BACKEND: ${{ secrets.DOCKERHUB_USERNAME }}/gliner-backend
   IMAGE_FRONTEND: ${{ secrets.DOCKERHUB_USERNAME }}/gliner-frontend
 
jobs:
   build-and-push:
     runs-on: ubuntu-latest
     steps:
       - name: Checkout code
         uses: actions/checkout@v3
       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v2
       - name: Log in to Docker Hub
         uses: docker/login-action@v2
         with:
           username: ${{ env.DOCKERHUB_USERNAME }}
           password: ${{ env.DOCKERHUB_TOKEN }}
 
       - name: Build and push backend image
         uses: docker/build-push-action@v4
         with:
           context: api
           file: api/Dockerfile
           push: true
           tags: ${{ env.IMAGE_BACKEND }}:latest
       - name: Build and push frontend image
         uses: docker/build-push-action@v4
         with:
           context: frontend
           file: frontend/Dockerfile
           push: true
           tags: ${{ env.IMAGE_FRONTEND }}:latest
           build-args: |
             VITE_API_URL=${{ secrets.VITE_API_URL }}
             VITE_KEYCLOAK_URL=${{ secrets.VITE_KEYCLOAK_URL }}
             VITE_KEYCLOAK_REALM=${{ secrets.VITE_KEYCLOAK_REALM }}
             VITE_KEYCLOAK_CLIENT_ID=${{ secrets.VITE_KEYCLOAK_CLIENT_ID }}
             VITE_APP_REDIRECT_URL=${{ secrets.VITE_APP_REDIRECT_URL }}
             
   deploy:
     name: Deploy to Azure VM
     runs-on: ubuntu-latest
     needs: build-and-push
     steps:
       - name: Start SSH agent and load key
         uses: webfactory/ssh-agent@v0.9.0
         with:
           ssh-private-key: ${{ secrets.VM_SSH_KEY }}
   
       - name: Add VM to known_hosts
         run: |
           mkdir -p ~/.ssh
           ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts
   
       - name: Deploy updated containers on Azure VM
         env:
           DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
         run: |
           ssh -o StrictHostKeyChecking=no "${{ secrets.VM_USER }}"@"${{ secrets.VM_IP }}" \
           DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} 'bash -s' << 'EOF'
             set -euo pipefail
         
             cd app
         
             docker compose down
         
             docker ps -a --format '{{.ID}} {{.Names}}' \
             | awk '/\b(gliner-backend|gliner-frontend)\b/ { print $1 }' \
             | xargs -r docker rm -f
         
             docker image rm -f "${DOCKERHUB_USERNAME}/gliner-backend:latest" 2>/dev/null || true
             docker image rm -f "${DOCKERHUB_USERNAME}/gliner-frontend:latest" 2>/dev/null || true
         
             docker image prune -f
         
             docker compose pull
             docker compose up -d
         
             docker compose ps
             docker compose logs --tail=50 backend || true
             docker compose logs --tail=50 frontend || true
           EOF
